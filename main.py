import os
import io
import re
import uuid
import asyncio
import time
from typing import Optional, Dict
from fastapi import FastAPI, File, UploadFile, BackgroundTasks, HTTPException
from fastapi.responses import JSONResponse, FileResponse
from fastapi.middleware.cors import CORSMiddleware
from paddleocr import PaddleOCR
from vietocr.tool.predictor import Predictor
from vietocr.tool.config import Cfg
from PIL import Image
import httpx

# ===========================================
# ‚öôÔ∏è Config & Init
# ===========================================
UPLOAD_DIR = "uploads"
OUTPUT_DIR = "output"
os.makedirs(UPLOAD_DIR, exist_ok=True)
os.makedirs(OUTPUT_DIR, exist_ok=True)

USE_GPU = os.getenv("USE_GPU_AUTO", "true").lower() == "true"
LLM_CORRECTION_ENABLED = os.getenv("LLM_CORRECTION_ENABLED", "true").lower() == "true"
LLM_PROVIDER = os.getenv("LLM_PROVIDER", "groq")
LLM_API_KEY = os.getenv("GROQ_API_KEY", "")
LLM_TIMEOUT = int(os.getenv("LLM_TIMEOUT", "30"))
CLEANUP_AFTER_SECONDS = int(os.getenv("CLEANUP_AFTER_SECONDS", "300"))  # 5 ph√∫t

app = FastAPI(title="OCR Service", version="2.1")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ===========================================
# üß© OCR Engines
# ===========================================
if not USE_GPU:
    os.environ["CUDA_VISIBLE_DEVICES"] = ""
else:
    os.environ["CUDA_VISIBLE_DEVICES"] = "0"  # GPU ƒë·∫ßu ti√™n

ocr_paddle = PaddleOCR(use_angle_cls=True, lang="en")

vietocr_config = Cfg.load_config_from_name("vgg_transformer")
vietocr_config["device"] = "cuda" if USE_GPU else "cpu"
vietocr = Predictor(vietocr_config)

# ===========================================
# üîß Helper Functions
# ===========================================
def detect_language(text: str) -> str:
    """Nh·∫≠n di·ªán ti·∫øng Vi·ªát"""
    if re.search(r"[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µƒë√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπ]", text, re.IGNORECASE):
        return "vi"
    return "en"

def merge_paddle_results(results):
    return "\n".join([line[1][0] for line in results if len(line) >= 2])

async def llm_correct_text(text: str) -> str:
    """G·ªçi API LLM ƒë·ªÉ s·ª≠a l·ªói OCR"""
    if not LLM_CORRECTION_ENABLED or not LLM_API_KEY or len(text.strip()) < 10:
        return text

    prompt = f"""
    B·∫°n l√† chuy√™n gia s·ª≠a l·ªói OCR. H√£y ph·ª•c h·ªìi ch√≠nh t·∫£, th√™m d·∫•u ti·∫øng Vi·ªát n·∫øu thi·∫øu,
    v√† gi·ªØ nguy√™n c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát, s·ªë, ƒë∆°n v·ªã ti·ªÅn t·ªá.
    VƒÉn b·∫£n OCR g·ªëc:
    {text}
    """

    try:
        async with httpx.AsyncClient(timeout=LLM_TIMEOUT) as client:
            response = await client.post(
                "https://api.groq.com/openai/v1/chat/completions",
                headers={"Authorization": f"Bearer {LLM_API_KEY}"},
                json={
                    "model": "llama3-8b-8192",
                    "messages": [
                        {"role": "system", "content": "B·∫°n l√† chuy√™n gia x·ª≠ l√Ω vƒÉn b·∫£n OCR."},
                        {"role": "user", "content": prompt},
                    ],
                },
            )
            data = response.json()
            return data["choices"][0]["message"]["content"].strip()
    except Exception as e:
        print(f"‚ùå LLM error: {e}")
        return text

async def cleanup_file(filepath: str, delay: int = CLEANUP_AFTER_SECONDS):
    """T·ª± x√≥a file sau X gi√¢y"""
    await asyncio.sleep(delay)
    if os.path.exists(filepath):
        try:
            os.remove(filepath)
            print(f"üßπ ƒê√£ x√≥a file: {filepath}")
        except Exception as e:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a {filepath}: {e}")

# ===========================================
# üöÄ API Endpoints
# ===========================================
@app.get("/ocr/health")
async def health():
    return {
        "status": "ok",
        "gpu": USE_GPU,
        "llm": LLM_CORRECTION_ENABLED,
        "cleanup_after_seconds": CLEANUP_AFTER_SECONDS
    }

@app.post("/ocr")
async def ocr_upload(file: UploadFile = File(...), background_tasks: BackgroundTasks = None):
    """
    Upload ·∫£nh -> Nh·∫≠n d·∫°ng text -> T·ª± x√≥a sau 5 ph√∫t
    """
    try:
        # --- L∆∞u file t·∫°m ---
        file_id = str(uuid.uuid4())
        file_ext = os.path.splitext(file.filename)[1]
        filepath = os.path.join(UPLOAD_DIR, f"{file_id}{file_ext}")

        with open(filepath, "wb") as f:
            f.write(await file.read())

        # --- ƒê·ªçc ·∫£nh ---
        image = Image.open(filepath).convert("RGB")

        # --- PaddleOCR ---
        paddle_result = ocr_paddle.ocr(image, cls=True)
        paddle_text = merge_paddle_results(paddle_result[0]) if paddle_result else ""

        # --- VietOCR ---
        lang = detect_language(paddle_text)
        if lang == "vi" or len(paddle_text.strip()) < 5:
            viet_text = vietocr.predict(image)
            raw_text = viet_text
            engine_used = "vietocr"
        else:
            raw_text = paddle_text
            engine_used = "paddleocr"

        # --- H·∫≠u x·ª≠ l√Ω LLM ---
        corrected_text = await llm_correct_text(raw_text)

        # --- Ghi file k·∫øt qu·∫£ ---
        output_path = os.path.join(OUTPUT_DIR, f"{file_id}.txt")
        with open(output_path, "w", encoding="utf-8") as f:
            f.write(corrected_text)

        # --- T·ª± ƒë·ªông d·ªçn r√°c ---
        background_tasks.add_task(cleanup_file, filepath)
        background_tasks.add_task(cleanup_file, output_path)

        return JSONResponse({
            "id": file_id,
            "filename": file.filename,
            "language": lang,
            "engine_used": engine_used,
            "raw_text": raw_text,
            "corrected_text": corrected_text,
            "file_deleted_after_seconds": CLEANUP_AFTER_SECONDS
        })

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/")
async def home():
    """Serve trang ch·ªß v·ªõi giao di·ªán upload"""
    return FileResponse("static/index.html", media_type="text/html")

@app.get("/static/{filename}")
async def serve_static(filename: str):
    """Serve c√°c file static kh√°c"""
    return FileResponse(f"static/{filename}")
